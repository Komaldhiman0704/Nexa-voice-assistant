# Import required libraries
import speech_recognition as sr       # For converting speech to text
import webbrowser                     # For opening websites
import pyttsx3                        # Old text-to-speech (not used anymore)
import musicLibrary                   # Custom module containing music links
import requests                       # To make HTTP requests (for news API)
from openai import OpenAI            # OpenAI API for AI response handling
from gtts import gTTS                 # Google Text-to-Speech (better voice)
import pygame                         # For playing the audio generated by gTTS
import os                             # For file operations like deleting temp files

# Initialize speech recognizer and old TTS engine
recognizer = sr.Recognizer()
engine = pyttsx3.init()

# News API key (replace with your own valid key)
newsapi = "<Your Key Here>"

# Old offline TTS function using pyttsx3 (not used anymore)
def speak_old(text):
    engine.say(text)
    engine.runAndWait()

# Function to convert text to speech using gTTS (Google Text-to-Speech)
def speak(text):
    temp_path = os.path.join(os.getcwd(), "temp.mp3")  # Path to temporary MP3 file

    try:
        # Convert text to speech and save as MP3
        tts = gTTS(text)
        tts.save(temp_path)

        # Ensure the file exists before attempting to play
        if not os.path.isfile(temp_path):
            raise FileNotFoundError(f"Expected {temp_path}, but it doesn't exist.")

        # Initialize Pygame mixer and play the file
        pygame.mixer.init()
        pygame.mixer.music.load(temp_path)
        pygame.mixer.music.play()

        # Wait until playback finishes
        while pygame.mixer.music.get_busy():
            pygame.time.Clock().tick(10)

    except Exception as e:
        print(f"[ERROR in speak()] {e}")

    finally:
        # Unload and delete the MP3 file
        try:
            pygame.mixer.music.unload()
        except:
            pass

        if os.path.isfile(temp_path):
            try:
                os.remove(temp_path)
            except:
                print(f"[WARN] Could not delete {temp_path}")

# Handle commands using OpenAI GPT

def aiProcess(command):
    client = OpenAI(api_key="<Your Key Here>")
    completion = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "You are a virtual assistant named Nexa skilled in general tasks like Alexa and Google Cloud. Give short responses please."},
            {"role": "user", "content": command}
        ]
    )
    return completion.choices[0].message.content

# Handle different voice commands
def processCommand(c):
    command = c.lower()

    if "open google" in command:
        webbrowser.open("https://google.com")
    elif "open facebook" in command:
        webbrowser.open("https://facebook.com")
    elif "open youtube" in command:
        webbrowser.open("https://youtube.com")
    elif "open linkedin" in command:
        webbrowser.open("https://linkedin.com")

    elif command.startswith("play"):
        song = command.split(" ", 1)[1]  # Get the song name after "play"
        link = musicLibrary.music.get(song, None)
        if link:
            webbrowser.open(link)
        else:
            speak("Sorry, I couldn't find that song.")

    elif "news" in command:
        r = requests.get(f"https://newsapi.org/v2/top-headlines?country=in&apiKey={newsapi}")
        if r.status_code == 200:
            articles = r.json().get('articles', [])
            for article in articles:
                speak(article['title'])
        else:
            speak("Sorry, I couldn't fetch the news right now.")

    else:
        output = aiProcess(command)
        speak(output)

# Main entry point
if __name__ == "__main__":
    speak("Initializing Nexa...")

    while True:
        r = sr.Recognizer()
        print("recognizing...")

        try:
            # Step 1: Listen for wake word
            with sr.Microphone() as source:
                print("Listening for wake word...")
                audio = r.listen(source, timeout=2, phrase_time_limit=1)

            word = r.recognize_google(audio)

            if word.lower() == "nexa":
                speak("Yes")
                # Step 2: Listen for command
                with sr.Microphone() as source:
                    print("Nexa Active... Listening for command...")
                    audio = r.listen(source)
                    command = r.recognize_google(audio)
                    processCommand(command)

        except Exception as e:
            print(f"[Error] {e}")
